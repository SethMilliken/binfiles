#!/usr/bin/env ruby
#
# This is a script for modifying copies of iTerm2 to uniquely identify them.
#
DELETE = ["-d", "--delete"].include?(ARGV[0])

APP="iTerm"
ICONAPP="Firefox"
BUNDLE_ID="ITRM"
CASKROOM="/opt/homebrew-cask/Caskroom"
CASK="iterm2"

app_specs = [
['ITR1' , 'Personal' , 'CandC.icns'       ],
#['ITR2' , 'VM'       , 'MatrixBlue.icns'  ],
#['ITR3' , 'Comm'     , 'MatrixGreen.icns' ],
#['ITR4' , 'Lists'    , 'MatrixGreen.icns' ],
]

class AppClone

  attr_accessor :identifier, :name, :icon

  def initialize(spec)
    @identifier, @name, @icon = spec
    @bundle_id = if /iTerm/ =~ @name
                   "com.googlecode.iterm2"
                 else
                   "com.googlecode.iterm2.#{@name}"
                 end
  end

  def install_root
    "/Applications"
  end

  def app_path
    "#{install_root}/#{@name}.app"
  end

  def contents_path
    "#{app_path}/Contents"
  end

  def original_root
    original_path = "/Applications/#{APP}.app"
    if File.exists? original_path
      return File.dirname(original_path)
    end
    original_path = Dir.glob("#{CASKROOM}/#{CASK}/**/#{APP}.app")
    if original_path.length > 0
      return File.dirname(original_path[-1])
    end
  end

  def copy_original
    unless File.exist? app_path
      printf "%s was not found. Copying...\n", app_path
      `cp -Rp "#{original_root}/#{APP}.app" "#{app_path}"`
      `open "#{app_path}"`
    end
  end

  def delete
    if File.exist? app_path
      printf "Deleting %s...\n", app_path
      `rm -rf "#{app_path}"`
    end
  end

  def clone
    delete if DELETE
    copy_original
    if File.exist? contents_path
      `/usr/libexec/PlistBuddy #{contents_path}/Info.plist -c 'Set :CFBundleIdentifier '#{@bundle_id}`
      `/usr/libexec/PlistBuddy #{contents_path}/Info.plist -c 'Set :CFBundleName '#{@name}`
      `/usr/libexec/PlistBuddy #{contents_path}/Info.plist -c 'Set :CFBundleSignature '#{@identifier}`
      `/usr/bin/sed -i '' -es/#{BUNDLE_ID}/#{@identifier}/ #{contents_path}/PkgInfo`
      `/bin/cp ~/Pictures/#{ICONAPP}Icons/#{@icon} #{contents_path}/Resources/#{APP}.icns` unless @icon.nil?
      `rm -rf #{contents_path}/_CodeSignature`
      printf "Updated: %s\n", contents_path
    end
  end

end

apps = []
for spec in app_specs do
  apps << AppClone.new(spec)
end
for app in apps
  app.clone
end
